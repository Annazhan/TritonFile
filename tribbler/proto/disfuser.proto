// DO NOT MODIFY
syntax = "proto2";

// DO NOT MODIFY
package disfuser;

message FRequest {
    required uint32 uid = 1;
    required uint32 gid = 2;
    required uint32 pid = 3;
}

message Read {
    required FRequest frequest = 1;
    required uint64 ino = 2;
    required uint64 fh = 3;
    required int64 offset= 4;
    required uint32 size = 5;
    required int32 flags = 6;
    optional uint64 lock_owner = 7;
}

message Data {
    required uint32 data = 1; // [u8]
}

message Write {
    required FRequest frequest = 1;
    required uint64 ino = 2;
    required uint64 fh = 3;
    required int64 offset= 4;
    required string data = 5; // [u8]
    required uint32 write_flag = 6;
    required int32 flags = 7;
    optional uint64 lock_owner = 8;
}

message LookUp {
    required FRequest frequest = 1;
    required uint64 parent = 2;
    // OsStr name = 3;
    required string name = 3;
}

message Create {
    required FRequest frequest = 1;
    required uint64 parent = 2;
    // OsStr name = 3;
    required string name = 3;
    required uint32 mode= 4;
    required uint32 umask = 5;
    required int32 flags = 6;
}

message Unlink {
    required FRequest frequest = 1;
    required uint64 parent = 2;
    // OsStr name = 3;
    required string name = 3;
}

message Getattr {
    required FRequest frequest = 1;
    required uint64 ino = 2;
}

message Open{
    required FRequest frequest = 1;
    required uint64 ino = 2;
    required int32 flags = 3;
}

message Release{
    required FRequest frequest = 1;
    required uint64 ino = 2;
    required uint64 fh = 3; 
    required int32 flags = 4; 
    optional uint64 lock_owner = 5; 
    required bool flush = 6; 
}

message Setxattr{
    required FRequest frequest = 1;
    required uint64 ino = 2;
    required string name = 3; 
    required string value = 4; 
    required int32 flags = 5; 
    required uint32 position = 6;
}

message Getxattr{
    required FRequest frequest = 1;
    required uint64 ino = 2;
    required string name = 3; 
    required uint32 size = 4;
}

message Listxattr{
    required FRequest frequest = 1;
    required uint64 ino = 2;
    required uint32 size = 3;
}

message Access{
    required FRequest frequest = 1;
    required uint64 ino = 2;
    required int32 mask = 3;
}

message Init{
    required FRequest frequest = 1;
}

message Rename{
    required FRequest frequest = 1;
    required uint64 parent = 2;
    required string name = 3; 
    required uint64 newparent = 4; 
    required string newname = 5; 
    required uint32 flags = 6;
}

message Setattr{
    required FRequest frequest = 1;
    required uint64 ino = 2;
    optional uint32 mode = 3; 
    optional uint32 uid = 4; 
    optional uint32 gid = 5; 
    optional uint64 size = 6; 
    optional uint64 fh = 7;     
    optional uint32 flags = 8;
    optional int64  atime_secs = 9;
    optional uint32 atime_nsecs = 10;
    optional int64  mtime_secs = 11;
    optional uint32 mtime_nsecs = 12;
}

message Reply {
    required string message = 1; // [u8] or fileAttr string
    required int32 errcode = 2; // for the Err when unwrap
}

message writeReply {
    required uint32 size = 1;
    required int32 errcode = 2;
}

message createReply {
    required string fileAttr = 1;
    required uint64 fh = 2;
    required int32 errcode = 3;
}

message unlinkReply {
    required int32 errcode = 1;
}

message getattrReply {
    required string fileAttr = 1;
    required int32 errcode = 2;
}

message openReply {
    required uint64 fh = 1;
    required uint32 openflag = 2;
    required int32 errcode = 3;
}

message releaseReply {
    required int32 errcode = 1;
}

message setxattrReply {
    required int32 errcode = 1;
}

message getxattrReply {
    required string data = 1; 
    required uint32 size = 2; 
    required int32 errcode = 3;
}

message listxattrReply {
    required string data = 1; 
    required uint32 size = 2; 
    required int32 errcode = 3;
}

message accessReply {
    required int32 errcode = 1;
}

message renameReply {
    required int32 errcode = 1;
}

message setattrReply {
    required string fileAttr = 1;
    required int32 errcode = 2;
}

message KeyValue {
    required string key = 1;
    required string value = 2;
  }
  
  message Pattern {
    required string prefix = 1;
    required string suffix = 2;
  }
  
  message Bool {
    required bool value = 1;
  }
  
  message Key {
    required string key = 1;
  }
  
  message Value {
    required string value = 1;
  }
  
  message StringList {
    repeated string list = 1;
  }
  
  message Clock {
    required  uint64 timestamp = 1;
  }
  
  message ListRemoveResponse {
    required uint32 removed = 1;
  }

  message initReply{
    required int32 errcode = 1; 
  }

  message ReadDir{
    required FRequest frequest = 1;
    required uint64 ino = 2;
    required uint64 fh = 3; 
    required int64 offset = 4; 
  }

  message ReadDirReply {
    required uint64 ino = 1;
    required int64 offset = 2; 
    required string fileType = 3; 
    required string name = 4; 
    required int32 errcode = 5; 

  }

  message OpenDir{
    required FRequest frequest = 1;
    required uint64 ino = 2;
    required int32 flags = 3; 
  }

  message OpenDirReply{
    required int32 fh = 1; 
    required int32 errcode = 2; 

  }

  message MkDir {
    required FRequest frequest = 1;
    required uint64 parent = 2;
    required string name = 3; 
    required uint32 mode = 4;
    required uint32 umask = 5;
  }

  message MkDirReply {
    required uint64 secs = 1; 
    required uint32 nanos = 2; 
    required string fileattr = 3; 
    required uint64 generation = 4; 
    required int32 errcode = 5; 

  }

  message ReleaseDir {
    required FRequest frequest = 1;
    required uint64 inode = 2;
    required uint64 fh = 3; 
    required int32 flags = 4;
  }

  message ReleaseDirReply{
    required int32 errcode = 1;
  }

service disfuser {
    rpc init(Init) returns (initReply) {} 
    rpc read(Read) returns (stream Reply) {}
    rpc write(Write) returns (writeReply) {}
    rpc lookup(LookUp) returns (Reply) {} 
    rpc create(Create) returns (createReply) {} 
    rpc unlink(Unlink) returns (unlinkReply) {} 
    rpc open(Open) returns (openReply) {} 
    rpc getattr(Getattr) returns (getattrReply) {} 
    rpc access(Access) returns (accessReply) {} 
    rpc rename(Rename) returns (renameReply) {} 
    rpc release(Release) returns (releaseReply) {} 
    rpc setxattr(stream Setxattr) returns (setxattrReply) {} 
    rpc getxattr(Getxattr) returns (stream getxattrReply) {} 
    rpc listxattr(Listxattr) returns (stream listxattrReply) {} 
    rpc setattr(Setattr) returns (setattrReply) {} 
    rpc readdir(ReadDir) returns (ReadDirReply) {}
    rpc opendir(OpenDir) returns (OpenDirReply) {}
    rpc mkdir(MkDir) returns (MkDirReply) {}
    rpc releasedir(ReleaseDir) returns (ReleaseDirReply) {}

    rpc get(Key) returns (Value);
    rpc set(KeyValue) returns (Bool);
    rpc keys(Pattern) returns (StringList);
    rpc listGet(Key) returns (StringList);
    rpc listAppend(KeyValue) returns (Bool);
    rpc listRemove(KeyValue) returns (ListRemoveResponse);
    rpc listKeys(Pattern) returns (StringList);
    rpc clock(Clock) returns (Clock);
}
